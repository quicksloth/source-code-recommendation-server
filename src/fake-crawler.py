from flask import Flask, request
import requests
import json

app = Flask(__name__)


@app.route('/')
def hello_world():
    return 'Hello, World!'


# TODO: temporary until all set client and crawler
@app.route('/crawl', methods=['GET'])
def crawl():
    print('REQUEST AQUI')
    request_body = request.get_json()
    print('request_body', request_body)
    url = 'http://0.0.0.0:10443/source-codes'
    data = {
        "requestID": request_body.get('requestID'),
        'searchResult': [
            # {
            #     'documentation': 'reading a file',
            #     'url': 'https://url.com',
            #     'sourceCode': [
            #         '''# Open the file for reading.\nwith open('my_file.txt', 'r') as infile:\n    data = infile.read()  # Read the contents of the file into memory.\n'''
            #     ],
            # },
            # {
            #     'documentation': 'When you’re working with Python, you don’t need to import a library in order to read and write files. It’s handled natively in the language, albeit in a unique manner.',
            #     'url': 'http://www.pythonforbeginners.com/files/reading-and-writing-files-in-python',
            #     'sourceCode': [
            #         '''file_object = open(“filename”, “mode”) where\nfile_object is the variable to add the file object.''',
            #         '''file = open("testfile.txt","w")\nfile.write("Hello World")\nfile.close()''',
            #     ],
            # },
        ],
    }

    # data = {"requestID": request_body.get('requestID'), "searchResult": [
    #     {"url": "http://www.pythonforbeginners.com/files/reading-and-writing-files-in-python",
    #      "documentation": " Reading and Writing Files in Python Overview File Types Open Function Mode Create a text file Reading a Text File in Python Looping over a file object Using the File Write Method Closing a File File Handling in the Real World With Statement Using the With Statement in the Real World Splitting Lines in a Text File More Reading Recommended Python Training DataCamp Categories",
    #      "sourceCode": ["file_object = open(filename, mode) where file_object is the variable to add the file object.",
    #                     "F = open(workfile,w)\r\nPrint f",
    #                     "file = open(testfile.txt,w)\r\n\r\nfile.write(Hello World)\r\nfile.write(This is our new text file)\r\nfile.write(and this is another line.)\r\nfile.write(Why? Because we can.)\r\n\r\nfile.close()",
    #                     "$ cat testfile.txt\r\nHello World\r\nThis is our new text file\r\nand this is another line.\r\nWhy? Because we can.",
    #                     "file.read()", "file = open(testfile.text, r)\r\nprint file.read()",
    #                     "file = open(testfile.txt, r)\r\n\r\nprint file.read(5)", "Hello",
    #                     "file = open(testfile.txt, r)\r\nprint file.readline():", "Hello World",
    #                     "file = open(testfile.txt, r)\r\nprint file.readline(3):",
    #                     "file = open(testfile.txt, r)\r\nprint file.readlines()",
    #                     "[Hello World, This is our new text file, and this is another line., Why? Because we can.]",
    #                     "file = open(testfile.txt, r)\r\nfor line in file:\r\nprint line,",
    #                     "Hello World\r\nThis is our new text file\r\nand this is another line.\r\nWhy? Because we can.",
    #                     "file = open(testfile.txt, w)\r\nfile.write(This is a test)\r\nfile.write(To add more lines.)\r\nfile.close()",
    #                     "fh = open(hello.txt, r)", "Fh = open(hello.txt, r)\r\nprint fh.read()",
    #                     "fh = open(hello.text, r)\r\nprint fh.readline()",
    #                     "fh = open(hello.txt, r)\r\nprint fh.readlines()",
    #                     "fh = open(hello.txt, w)\r\n\r\nfh.write(Put the text you want to add here)\r\nfh.write(and more lines if need be.)\r\n\r\nfh.close()",
    #                     "fh = open(hello.txt,w)\r\nlines_of_text = [One line of text here, and another line here, and yet another here, and so on and so forth]\r\nfh.writelines(lines_of_text)\r\nfh.close()",
    #                     "fh = open(hello.txt, a)\r\nfh.write(We Meet Again World)\r\nfh.close",
    #                     "fh = open(hello.txt, r)\r\nprint fh.read()\r\nfh.close()", "with open(filename) as file:",
    #                     "with open(testfile.txt) as file:\r\ndata = file.read()\r\ndo something with data",
    #                     "with open(testfile.txt) as f:\r\nfor line in f:\r\nprint line,",
    #                     "with open(hello.txt, w) as f:\r\nf.write(Hello World)",
    #                     "with open(hello.txt) as f:\r\ndata = f.readlines()",
    #                     "with open(hello.text, r) as f:\r\ndata = f.readlines()\r\n\r\nfor line in data:\r\nwords = line.split()\r\nprint words",
    #                     "[hello, world, how, are, you, today?]\r\n[today, is, Saturday]",
    #                     "Official Python Documentation - Reading and Writing Files\r\nPython File Handling Cheat Sheet\r\nNon-Programmer's Tutorial for Python 3\r\nBeginning Python"]},
    #     {"url": "https://docs.python.org/2/tutorial/inputoutput.html",
    #      "documentation": " Navigation open returns a file object and is most commonly used with two arguments open filename mode Strings can easily be written to and read from a file Numbers take a bit more effort since the read method only returns strings which will have to be passed to a function like int which takes a string like 123 and returns its numeric value 123 When you want to save more complex data types like nested lists and dictionaries parsing and serializing by hand becomes complicated Note The JSON format is commonly used by modern applications to allow for data exchange Many programmers are already familiar with it which makes it a good choice for interoperability See also Contrary to JSON pickle is a protocol which allows the serialization of arbitrarily complex Python objects As such it is specific to Python and cannot be used to communicate with applications written in other languages It is also insecure by default deserializing pickle data coming from an untrusted source can execute arbitrary code if the data was crafted by a skilled attacker Table Of Contents Previous topic Next topic This Page Quick search Navigation",
    #      "sourceCode": [
    #          "s = 'Hello, world.'\nstr(s)repr(s)str(1.0/7.0)repr(1.0/7.0)x = 10 * 3.25\ny = 200 * 200\ns = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'\nprint s# The repr() of a string adds string quotes and backslashes:\nhello = 'hello, world\\n'\nhellos = repr(hello)\nprint hellos# The argument to repr() may be any Python object:\nrepr((x, y, ('spam', 'eggs')))",
    #          "for x in range(1, 11):\n    print repr(x).rjust(2), repr(x*x).rjust(3),\n    # Note trailing comma on previous line\n    print repr(x*x*x).rjust(4)\n2   4    8 4  16   64 6  36  216 8  64  51210 100 1000\nfor x in range(1,11):\n    print '{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x)\n2   4    8 4  16   64 6  36  216 8  64  51210 100 1000\n",
    #          "'12'.zfill(5)'-3.14'.zfill(7)'3.14159265359'.zfill(5)",
    #          "print 'We are the {} who say \"{}!\"'.format('knights', 'Ni')",
    #          "print '{0} and {1}'.format('spam', 'eggs')print '{1} and {0}'.format('spam', 'eggs')",
    #          "print 'This {food} is {adjective}.'.format(\n      food='spam', adjective='absolutely horrible')",
    #          "print 'The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',\n                                                   other='Georg')",
    #          "import math\nprint 'The value of PI is approximately {}.'.format(math.pi)print 'The value of PI is approximately {!r}.'.format(math.pi)",
    #          "import math\nprint 'The value of PI is approximately {0:.3f}.'.format(math.pi)",
    #          "table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}\nfor name, phone in table.items():\n    print '{0:10} ==> {1:10d}'.format(name, phone)\n...Dcab       ==>       7678",
    #          "table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\nprint ('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '\n       'Dcab: {0[Dcab]:d}'.format(table))",
    #          "table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\nprint 'Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table)",
    #          "import math\nprint 'The value of PI is approximately %5.3f.' % math.pi",
    #          "f = open('workfile', 'w')\nprint f\n", "f.read()f.read()", "f.readline()f.readline()f.readline()",
    #          "for line in f:This is the first line of the file.", "f.write('This is a test\\n')\n",
    #          "value = ('the answer', 42)\ns = str(value)\nf.write(s)\n",
    #          "f = open('workfile', 'r+')\nf.write('0123456789abcdef')\nf.seek(5)      # Go to the 6th byte in the file\nf.read(1)f.seek(-3, 2)  # Go to the 3rd byte before the end\nf.read(1)",
    #          "f.close()\nf.read()  File \"\", line 1, in ",
    #          "with open('workfile', 'r') as f:\n    read_data = f.read()\nf.closed",
    #          "import json\njson.dumps([1, 'simple', 'list'])", "json.dump(x, f)\n", "x = json.load(f)\n"]},
    #     {"url": "https://docs.python.org/3/tutorial/inputoutput.html",
    #      "documentation": " Navigation open returns a file object and is most commonly used with two arguments open filename mode Strings can easily be written to and read from a file Numbers take a bit more effort since the read method only returns strings which will have to be passed to a function like int which takes a string like 123 and returns its numeric value 123 When you want to save more complex data types like nested lists and dictionaries parsing and serializing by hand becomes complicated Note The JSON format is commonly used by modern applications to allow for data exchange Many programmers are already familiar with it which makes it a good choice for interoperability See also Contrary to JSON pickle is a protocol which allows the serialization of arbitrarily complex Python objects As such it is specific to Python and cannot be used to communicate with applications written in other languages It is also insecure by default deserializing pickle data coming from an untrusted source can execute arbitrary code if the data was crafted by a skilled attacker Table Of Contents Previous topic Next topic This Page Navigation",
    #      "sourceCode": [
    #          "s = 'Hello, world.'\nstr(s)repr(s)str(1/7)x = 10 * 3.25\ny = 200 * 200\ns = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'\nprint(s)# The repr() of a string adds string quotes and backslashes:\nhello = 'hello, world\\n'\nhellos = repr(hello)\nprint(hellos)# The argument to repr() may be any Python object:\nrepr((x, y, ('spam', 'eggs')))",
    #          "for x in range(1, 11):\n    print(repr(x).rjust(2), repr(x*x).rjust(3), end=' ')\n    # Note use of 'end' on previous line\n    print(repr(x*x*x).rjust(4))\n2   4    8 4  16   64 6  36  216 8  64  51210 100 1000\nfor x in range(1, 11):\n    print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))\n2   4    8 4  16   64 6  36  216 8  64  51210 100 1000\n",
    #          "'12'.zfill(5)'-3.14'.zfill(7)'3.14159265359'.zfill(5)",
    #          "print('We are the {} who say \"{}!\"'.format('knights', 'Ni'))",
    #          "print('{0} and {1}'.format('spam', 'eggs'))print('{1} and {0}'.format('spam', 'eggs'))",
    #          "print('This {food} is {adjective}.'.format(\n      food='spam', adjective='absolutely horrible'))",
    #          "print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',The story of Bill, Manfred, and Georg.\n",
    #          "contents = 'eels'\nprint('My hovercraft is full of {}.'.format(contents))print('My hovercraft is full of {!r}.'.format(contents))",
    #          "import math\nprint('The value of PI is approximately {0:.3f}.'.format(math.pi))",
    #          "table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}\nfor name, phone in table.items():\n    print('{0:10} ==> {1:10d}'.format(name, phone))\n...Dcab       ==>       7678",
    #          "table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\nprint('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '\n      'Dcab: {0[Dcab]:d}'.format(table))",
    #          "table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}\nprint('Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table))",
    #          "import math\nprint('The value of PI is approximately %5.3f.' % math.pi)", "f = open('workfile', 'w')\n",
    #          "with open('workfile') as f:\n    read_data = f.read()\nf.closed",
    #          "f.close()\nf.read()  File \"\", line 1, in ", "f.read()f.read()", "f.readline()f.readline()f.readline()",
    #          "for line in f:\n    print(line, end='')\n...Second line of the file\n", "f.write('This is a test\\n')",
    #          "value = ('the answer', 42)\ns = str(value)  # convert the tuple to string\nf.write(s)",
    #          "f = open('workfile', 'rb+')\nf.write(b'0123456789abcdef')f.seek(5)      # Go to the 6th byte in the filef.read(1)f.seek(-3, 2)  # Go to the 3rd byte before the endf.read(1)",
    #          "import json\njson.dumps([1, 'simple', 'list'])", "json.dump(x, f)\n", "x = json.load(f)\n"]},
    #     {"url": "https://stackoverflow.com/questions/3277503/how-do-i-read-a-file-line-by-line-into-a-list",
    #      "documentation": " current community your communities more stack exchange communities Learn Share Build Each month over 50 million developers come to Stack Overflow to learn share their knowledge and build their careers Join the worldacirc128153s largest developer community How do I read a file linebyline into a list Heres a realworld example that shows how to readwrite a file dreamsyssoft compythonscriptingtutorialclassestutorial zwnj8203php I agree with J F Sebastian Using for line in f is memory efficient fast and leads to simple code The OP has gone underground at Jul 18 10 at 2321 one hour after asking the question and apparently hasnt been seen since Julie is a real winner one question no answers silent for 7 years but top 3 of SO with almost 6000 reputation and 15 badges shes probably gone on to become an overnight millionaire EmettSpeer Probably because the user was looking for an answer P 30 Answers 30 Content is the list that contains the read lines How can we strip the lines using this method Because the elements have n at the end content x strip n for x in content Or if youre a fan of doing things in one swell foop content x strip n for x in f readlines fbicknel please read my comment above Dont use file readlines in a forloop a file object itself is enough lines line rstrip n for line in file if you only want to discard the newline lines line rstrip n for line in open filename For a list it should be lines line rstrip n for line in open filename Wont the 2nd option leave the file open since its not guarded by a context on its own yo It does but most people do not care about that in small programs There is no harm in small programs since the leaked file object are garbage collected but it is not a good habit to do this Safer with open filename as f lines line rstrip n for line in f aaronasterling what happens when you dont call ins close wrongusername the file stays open and consumes resources It wont be automatically garbage collected until ins goes out of scope I did a test with 5 files total 1 22 GB with and without close without 4 43s user 4 87s system 58 cpu 15 982 total with 4 39s user 4 14s system 67 cpu 12 594 total GianPaJ The problem with not closing the file when you are done with it doesnt have anything to do with CPU time It is a matter of memory used for io buffers file handles used there may be an OS limitation on the number of files open at once and issues with other programs wanting to use the file at the same time The file in the example above actually gets closed the with open as ins is a context processor this means that Python takes care of freeing the resources according to the context manager protocol which file object adheres to See preshing com20110920thepythonwithstatementbyexample and python orgdevpepspep0343 wow how this works internally any explanations open returns a file which can be iterated over When you iterate over a file you get the lines from that file tuple can take an iterator and instantiate a tuple instance for you from the iterator that you give it lines is a tuple created from the lines of the file MarshallFarrier Try lines open filename read split n instead does it close the file NoctisSkytower I find lines open filename read splitlines a little cleaner and I believe it also handles DOS line endings better Best most concise answer f read splitlines no strips and complicated for loops great ans better than using lines open filename read split n as suggested elsewhere 1 This was exactly what I needed and thanks for explaining the downsides As a beginner in Python its awesome to understand why a solution is the solution Cheers the question doesnt state the need to process every line so this answer gives irrelevant information Think a bit more Corey Do you really ever want your computer to read each line without ever doing anything with these lines Surely you can realize you always need to process them one way or another You always need to do something with the lines It can be as simple as printing the lines or counting them There is no value in having your process read the lines in memory but not doing anything with it PierreOcinom that is correct Given that the file is opened in read only mode you couldnt modify the original file with the code above To open a file for both reading and writing use open filepath r It might be fine in some cases but this doesnt close the file even after the loop has completed stackoverflow coma1832589232593 MerlynMorganGraham Ive updated the answer it now includes close tks for pointing that The with block closes the file automatically No need for the final fp close line in that last example See repl itIMeA0 MerlynMorganGraham Tks for pointing that f readlines does the same no need to append to an empty list You are right This provides insight into a solution if you want to do something while you are reading in the lines Like some stripregex transformation this entire answer could be replaced by 2 lines of selfexplanatory code the explanations here are very verbose and convey very little rstrip potentially strips all trailing whitespace not just the n use rstrip n more efficient compared to what where else would the work be done This is the only one that makes an actual array P Shortest and sweetest solution of them all on here a few things wrong here you need to quote file txt and you never closed the file handle why do you mport time and then never use it python does have an array see the standard librarys array module but the question asked for a list what does process line do I get an error that there is not such variable defined I guess something needs importing and I tried to import multiprocessing Process but thats not it I guess Could you please elaborate Thanks process line is a function that you need to implement to process the data for example instead of that line if you use print line it will print each line from the linesbuffer I tried this but it does not split the line How would you do that Can you please tell me if it gives any errors It was not giving errors what I meant is that it was not splitting the lines the way I wanted I do not remember how I solve it but I think I ended up using something else I apologize for the confusion Command line version Run with Please explain your code please Please do not add unnecessary responses to such an old post Ok your lines list open dict lst r is not really bad but the r is implied and could be ommitted a list comprehension is more pythonic than a map lambda and worse than all you do not explain your code SergeBallesta dont be so impolite The list command is handy by itself if you do want to keep the trailing n but SergeBallesta leaving tone aside has a point re use of a lambda linesSanitized line rstrip n for line in lines is both more Pythonic and more readable Your code doesnt read the lines into a list array Instead it folds all lines into a single line using a space as the separator and additionally replaces each comma with a space Several problems You dont close the file and you store all lines in memory twice the question was about reading into a list this answer just displays the entire contents like cat would protected by Antti Haapala May 2 16 at 652 Not the answer youre looking for Browse other questions tagged string file python2 x readlines or ask your own question asked viewed 2057116 times active Linked Related Hot Network Questions Stack Overflow Stack Overflow Business Company Stack Exchange Network ",
    #      "sourceCode": [
    #          "with open(fname) as f:\n    content = f.readlines()\n# you may also want to remove whitespace characters like `\\n` at the end of each line\ncontent = [x.strip() for x in content] \n",
    #          "with open('filename') as f:\n    lines = f.readlines()\n",
    #          "lines = [line.rstrip('\\n') for line in open('filename')]\n",
    #          "with open(\"file.txt\", \"r\") as ins:\n    array = []\n    for line in ins:\n        array.append(line)\n",
    #          "lines = tuple(open(filename, 'r'))\n", "with open(fname) as f:\n    content = f.readlines()\n",
    #          "with open(fname) as f:\n    content = f.read().splitlines()\n",
    #          "with open('/your/path/file') as f:\n    my_lines = f.readlines()\n",
    #          "with open('/your/path/file') as f:\n    for line in f:\n        process(line)\n",
    #          "def process(line):\n    if 'save the world' in line.lower():\n         superman.save_the_world()\n",
    #          "lines = open('file.txt').read().split(\"\\n\")\n",
    #          "fp = open('file.txt') # open file on read mode\nlines = fp.read().split(\"\\n\") # create a list containing all lines\nfp.close() # close file\n",
    #          "with open('file.txt') as fp:\n    lines = fp.read().split(\"\\n\")\n",
    #          "array = []\nwith open(\"file.txt\", \"r\") as f:\n  for line in f:\n    array.append(line)\n",
    #          "infile = open('my_file.txt', 'r')  # Open the file for reading.\ndata = infile.read()  # Read the contents of the file.\ninfile.close()  # Close the file since we're done using it.\n",
    #          "# Open the file for reading.\nwith open('my_file.txt', 'r') as infile:\n    data = infile.read()  # Read the contents of the file into memory.\n",
    #          "# Return a list of the lines, breaking at line boundaries.\nmy_list = data.splitlines()\n",
    #          "# Open the file for reading.\nwith open('my_file.txt', 'r') as infile:\n    data = infile.read()  # Read the contents of the file into memory.\n# Return a list of the lines, breaking at line boundaries.\nmy_list = data.splitlines()\n",
    #          "     A fost odat&Atilde;&pound; ca-n povesti,\n     A fost ca niciodat&Atilde;&pound;,\n     Din rude m&Atilde;&pound;ri &Atilde;&reg;mp&Atilde;&pound;r&Atilde;&pound;testi,\n     O prea frumoas&Atilde;&pound; fat&Atilde;&pound;.\n",
    #          "    print my_list  # Print the list.\n    # Print each line in the list.\n    for line in my_list:\n        print line\n    # Print the fourth element in this list.\n    print my_list[3]\n",
    #          "     ['A fost odat\\xc3\\xa3 ca-n povesti,', 'A fost ca niciodat\\xc3\\xa3,',\n     'Din rude m\\xc3\\xa3ri \\xc3\\xaemp\\xc3\\xa3r\\xc3\\xa3testi,', 'O prea\n     frumoas\\xc3\\xa3 fat\\xc3\\xa3.']\n     A fost odat&Atilde;&pound; ca-n povesti, A fost ca niciodat&Atilde;&pound;, Din rude m&Atilde;&pound;ri\n     &Atilde;&reg;mp&Atilde;&pound;r&Atilde;&pound;testi, O prea frumoas&Atilde;&pound; fat&Atilde;&pound;.\n     O prea frumoas&Atilde;&pound; fat&Atilde;&pound;.\n",
    #          "lines = []\nwith open(\"myfile.txt\") as f:\n    for line in f:\n        lines.append(line)\n",
    #          "lines = [line.rstrip() for line in open('file.txt')]\n",
    #          "import numpy as np\ndata = np.genfromtxt(\"yourfile.dat\",delimiter=\"\\n\")\n",
    #          "# reader.py\nimport fileinput\ncontent = []\nfor line in fileinput.input():\n    content.append(line.strip())\nfileinput.close()\n",
    #          "$ python reader.py textfile.txt \n", "lines = open('C:/path/file.txt').read().splitlines()\n",
    #          "f = open(\"your_file.txt\",'r')\nout = f.readlines() # will append in the list out\n",
    #          "for line in out:\n    print line\n", "for line in f:\n    print line\n",
    #          "inp = file.txt\ndata = open(inp)\ndat = data.read()\nlst = dat.splitlines()\nprint lst\n",
    #          "with open(file) as g:\n    stuff = g.readlines()\n",
    #          "import time\nfile = raw_input (\"Enter EXACT file name: \")\nwith open(file) as g:\n    stuff = g.readlines()\nprint (stuff)\nexit = raw_input(\"Press enter when you are done.\")\n",
    #          "with open(\"myfile.txt\", encoding=\"utf-8\") as file:\n     my_list = file.readlines()\n",
    #          "my_list = [x.strip() for x in my_list]\n",
    #          "for rows in my_list:\n    print(rows)\n...\nline number one of the txt file\nline number two of the txt file\nline number three of the txt file\n",
    #          "array = [] #declaring a list with name '**array**'\nwith open(PATH,'r') as reader :\n    for line in reader :\n        array.append(line)\n",
    #          "buffersize = 2**16\nwith open(path) as f: \n    while True:\n        lines_buffer = f.readlines(buffersize)\n        if not lines_buffer:\n            break\n        for line in lines_buffer:\n            process(line)\n",
    #          "import pandas as pd\ndata = pd.read_csv(filename) # You can also add parameters such as header, sep, etc.\narray = data.values\n",
    #          "file1=open(\"filename\",\"r\")\nand for reading use\nlines=file1.readlines()\n",
    #          "import numpy \ndata = numpy.loadtxt(filename,delimiter=\"\\n\")\n",
    #          "lines = open(filePath).readlines()\n",
    #          "#!/bin/python3\nimport os\nimport sys\nabspath = os.path.abspath(__file__)\ndname = os.path.dirname(abspath)\nfilename = dname + sys.argv[1]\narr = open(filename).read().split(\"\\n\") \nprint(arr)\n",
    #          "python3 somefile.py input_file_name.txt\n",
    #          "lines = list(open(\"dict.lst\", \"r\"))\nlinesSanitized = map(lambda each:each.strip(\"\\n\"), lines)\nprint linesSanitized\n",
    #          "with open(fname) as fo:\n        data=fo.read().replace('\\n', ' ').replace (',', ' ')\n",
    #          "textFile = open(\"E:\\Values.txt\",\"r\")\ntextFileLines = textFile.readlines()\n",
    #          "fp = open(\"filename\")\ncontent = fp.read();\nlines = content.split(\"\\n\")\n",
    #          "def cat(filename):\n    with open(filename) as f:\n        return f.read().decode('utf-8')\n",
    #          "content = cat(filename)\n"]}, {"url": "https://automatetheboringstuff.com/chapter8/",
    #                                          "documentation": " Chapter 8 Reading and Writing Files Reading and Writing Files Variables are a fine way to store data while your program is running but if you want your data to persist even after your program has finished you need to save it to a file You can think of a files contents as a single string value potentially gigabytes in size In this chapter you will learn how to use Python to create read and save files on the hard drive Files and File Paths A file has two key properties a filename usually written as one word and a path The path specifies the location of a file on the computer For example there is a file on my Windows 7 laptop with the filename project docx in the path CUsersasweigartDocuments The part of the filename after the last period is called the files extension and tells you a files type project docx is a Word document and Users asweigart and Documents all refer to folders also called directories Folders can contain files and other folders For example project docx is in the Documents folder which is inside the asweigart folder which is inside the Users folder Figure81 shows this folder organization Figure81 A file in a hierarchy of folders The C part of the path is the root folder which contains all other folders On Windows the root folder is named C and is also called the C drive On OS X and Linux the root folder is In this book Ill be using the Windowsstyle root folder C If you are entering the interactive shell examples on OS X or Linux enter instead Additional volumes such as a DVD drive or USB thumb drive will appear differently on different operating systems On Windows they appear as new lettered root drives such as D or E On OS X they appear as new folders under the Volumes folder On Linux they appear as new folders under the mnt mount folder Also note that while folder names and filenames are not case sensitive on Windows and OS X they are case sensitive on Linux Backslash on Windows and Forward Slash on OS X and Linux On Windows paths are written using backslashes as the separator between folder names OS X and Linux however use the forward slash as their path separator If you want your programs to work on all operating systems you will have to write your Python scripts to handle both cases Fortunately this is simple to do with the os path join function If you pass it the string values of individual file and folder names in your path os path join will return a string with a file path using the correct path separators Enter the following into the interactive shell Im running these interactive shell examples on Windows so os path join usr bin spam returned usrbinspam Notice that the backslashes are doubled because each backslash needs to be escaped by another backslash character If I had called this function on OS X or Linux the string would have been usrbinspam The os path join function is helpful if you need to create strings for filenames These strings will be passed to several of the filerelated functions introduced in this chapter For example the following example joins names from a list of filenames to the end of a folders name The Current Working Directory Every program that runs on your computer has a current working directory or cwd Any filenames or paths that do not begin with the root folder are assumed to be under the current working directory You can get the current working directory as a string value with the os getcwd function and change it with os chdir Enter the following into the interactive shell Here the current working directory is set to CPython34 so the filename project docx refers to CPython34project docx When we change the current working directory to CWindows project docx is interpreted as C Windowsproject docx Python will display an error if you try to change to a directory that does not exist Note While folder is the more modern name for directory note that current working directory or just working directory is the standard term not current working folder Absolute vs Relative Paths There are two ways to specify a file path An absolute path which always begins with the root folder A relative path which is relative to the programs current working directory There are also the dot and dotdot folders These are not real folders but special names that can be used in a path A single period dot for a folder name is shorthand for this directory Two periods dotdot means the parent folder Figure82 is an example of some folders and files When the current working directory is set to Cbacon the relative paths for the other folders and files are set as they are in the figure Figure82 The relative paths for folders and files in the working directory Cbacon The at the start of a relative path is optional For example spam txt and spam txt refer to the same file Creating New Folders with os makedirs Your programs can create new folders directories with the os makedirs function Enter the following into the interactive shell This will create not just the Cdelicious folder but also a walnut folder inside Cdelicious and a waffles folder inside Cdeliciouswalnut That is os makedirs will create any necessary intermediate folders in order to ensure that the full path exists Figure83 shows this hierarchy of folders Figure83 The result of os makedirs Cdelicious walnutwaffles The os path Module The os path module contains many helpful functions related to filenames and file paths For instance youve already used os path join to build paths in a way that will work on any operating system Since os path is a module inside the os module you can import it by simply running import os Whenever your programs need to work with files folders or file paths you can refer to the short examples in this section The full documentation for the os path module is on the Python website at httpdocs python org3libraryos path html Note Most of the examples that follow in this section will require the os module so remember to import it at the beginning of any script you write and any time you restart IDLE Otherwise youll get a NameError name os is not defined error message Handling Absolute and Relative Paths The os path module provides functions for returning the absolute path of a relative path and for checking whether a given path is an absolute path Calling os path abspath path will return a string of the absolute path of the argument This is an easy way to convert a relative path into an absolute one Calling os path isabs path will return True if the argument is an absolute path and False if it is a relative path Calling os path relpath path start will return a string of a relative path from the start path to path If start is not provided the current working directory is used as the start path Try these functions in the interactive shell Since CPython34 was the working directory when os path abspath was called the singledot folder represents the absolute path CPython34 Note Since your system probably has different files and folders on it than mine you wont be able to follow every example in this chapter exactly Still try to follow along using folders that exist on your computer Enter the following calls to os path relpath into the interactive shell Calling os path dirname path will return a string of everything that comes before the last slash in the path argument Calling os path basename path will return a string of everything that comes after the last slash in the path argument The dir name and base name of a path are outlined in Figure84 Figure84 The base name follows the last slash in a path and is the same as the filename The dir name is everything before the last slash For example enter the following into the interactive shell If you need a paths dir name and base name together you can just call os path split to get a tuple value with these two strings like so Notice that you could create the same tuple by calling os path dirname and os path basename and placing their return values in a tuple But os path split is a nice shortcut if you need both values Also note that os path split does not take a file path and return a list of strings of each folder For that use the split string method and split on the string in os sep Recall from earlier that the os sep variable is set to the correct folderseparating slash for the computer running the program For example enter the following into the interactive shell On OS X and Linux systems there will be a blank string at the start of the returned list The split string method will work to return a list of each part of the path It will work on any operating system if you pass it os path sep Finding File Sizes and Folder Contents Once you have ways of handling file paths you can then start gathering information about specific files and folders The os path module provides functions for finding the size of a file in bytes and the files and folders inside a given folder Calling os path getsize path will return the size in bytes of the file in the path argument Calling os listdir path will return a list of filename strings for each file in the path argument Note that this function is in the os module not os path Heres what I get when I try these functions in the interactive shell As you can see the calc exe program on my computer is 776192 bytes in size and I have a lot of files in CWindowssystem32 If I want to find the total size of all the files in this directory I can use os path getsize and os listdir together As I loop over each filename in the CWindowsSystem32 folder the totalSize variable is incremented by the size of each file Notice how when I call os path getsize I use os path join to join the folder name with the current filename The integer that os path getsize returns is added to the value of totalSize After looping through all the files I print totalSize to see the total size of the CWindowsSystem32 folder Checking Path Validity Many Python functions will crash with an error if you supply them with a path that does not exist The os path module provides functions to check whether a given path exists and whether it is a file or folder Calling os path exists path will return True if the file or folder referred to in the argument exists and will return False if it does not exist Calling os path isfile path will return True if the path argument exists and is a file and will return False otherwise Calling os path isdir path will return True if the path argument exists and is a folder and will return False otherwise Heres what I get when I try these functions in the interactive shell You can determine whether there is a DVD or flash drive currently attached to the computer by checking for it with the os path exists function For instance if I wanted to check for a flash drive with the volume named D on my Windows computer I could do that with the following Oops It looks like I forgot to plug in my flash drive The File ReadingWriting Process Once you are comfortable working with folders and relative paths youll be able to specify the location of files to read and write The functions covered in the next few sections will apply to plaintext files Plaintext files contain only basic text characters and do not include font size or color information Text files with the txt extension or Python script files with the py extension are examples of plaintext files These can be opened with Windowss Notepad or OS Xs TextEdit application Your programs can easily read the contents of plaintext files and treat them as an ordinary string value Binary files are all other file types such as word processing documents PDFs images spreadsheets and executable programs If you open a binary file in Notepad or TextEdit it will look like scrambled nonsense like in Figure85 Figure85 The Windows calc exe program opened in Notepad Since every different type of binary file must be handled in its own way this book will not go into reading and writing raw binary files directly Fortunately many modules make working with binary files easieryou will explore one of them the shelve module later in this chapter There are three steps to reading or writing files in Python Call the open function to return a File object Call the read or write method on the File object Close the file by calling the close method on the File object Opening Files with the open Function To open a file with the open function you pass it a string path indicating the file you want to open it can be either an absolute or relative path The open function returns a File object Try it by creating a text file named hello txt using Notepad or TextEdit Type Hello world as the content of this text file and save it in your user home folder Then if youre using Windows enter the following into the interactive shell If youre using OS X enter the following into the interactive shell instead Make sure to replace yourhomefolder with your computer username For example my username is asweigart so Id enter CUsersasweigart hello txt on Windows Both these commands will open the file in reading plaintext mode or read mode for short When a file is opened in read mode Python lets you only read data from the file you cant write or modify it in any way Read mode is the default mode for files you open in Python But if you dont want to rely on Pythons defaults you can explicitly specify the mode by passing the string value r as a second argument to open So open Usersasweigart hello txt r and open Usersasweigarthello txt do the same thing The call to open returns a File object A File object represents a file on your computer it is simply another type of value in Python much like the lists and dictionaries youre already familiar with In the previous example you stored the File object in the variable helloFile Now whenever you want to read from or write to the file you can do so by calling methods on the File object in helloFile Reading the Contents of Files Now that you have a File object you can start reading from it If you want to read the entire contents of a file as a string value use the File objects read method Lets continue with the hello txt File object you stored in helloFile Enter the following into the interactive shell If you think of the contents of a file as a single large string value the read method returns the string that is stored in the file Alternatively you can use the readlines method to get a list of string values from the file one string for each line of text For example create a file named sonnet29 txt in the same directory as hello txt and write the following text in it Make sure to separate the four lines with line breaks Then enter the following into the interactive shell Note that each of the string values ends with a newline character n except for the last line of the file A list of strings is often easier to work with than a single large string value Writing to Files Python allows you to write content to a file in a way similar to how the print function writes strings to the screen You cant write to a file youve opened in read mode though Instead you need to open it in write plaintext mode or append plaintext mode or write mode and append mode for short Write mode will overwrite the existing file and start from scratch just like when you overwrite a variables value with a new value Pass w as the second argument to open to open the file in write mode Append mode on the other hand will append text to the end of the existing file You can think of this as appending to a list in a variable rather than overwriting the variable altogether Pass a as the second argument to open to open the file in append mode If the filename passed to open does not exist both write and append mode will create a new blank file After reading or writing a file call the close method before opening the file again Lets put these concepts together Enter the following into the interactive shell First we open bacon txt in write mode Since there isnt a bacon txt yet Python creates one Calling write on the opened file and passing write the string argument Hello world n writes the string to the file and returns the number of characters written including the newline Then we close the file To add text to the existing contents of the file instead of replacing the string we just wrote we open the file in append mode We write Bacon is not a vegetable to the file and close it Finally to print the file contents to the screen we open the file in its default read mode call read store the resulting File object in content close the file and print content Note that the write method does not automatically add a newline character to the end of the string like the print function does You will have to add this character yourself Saving Variables with the shelve Module You can save variables in your Python programs to binary shelf files using the shelve module This way your program can restore data to variables from the hard drive The shelve module will let you add Save and Open features to your program For example if you ran a program and entered some configuration settings you could save those settings to a shelf file and then have the program load them the next time it is run Enter the following into the interactive shell To read and write data using the shelve module you first import shelve Call shelve open and pass it a filename and then store the returned shelf value in a variable You can make changes to the shelf value as if it were a dictionary When youre done call close on the shelf value Here our shelf value is stored in shelfFile We create a list cats and write shelfFilecats cats to store the list in shelfFile as a value associated with the key cats like in a dictionary Then we call close on shelfFile After running the previous code on Windows you will see three new files in the current working directory mydata bak mydata dat and mydata dir On OS X only a single mydata db file will be created These binary files contain the data you stored in your shelf The format of these binary files is not important you only need to know what the shelve module does not how it does it The module frees you from worrying about how to store your programs data to a file Your programs can use the shelve module to later reopen and retrieve the data from these shelf files Shelf values dont have to be opened in read or write modethey can do both once opened Enter the following into the interactive shell Here we open the shelf files to check that our data was stored correctly Entering shelfFilecats returns the same list that we stored earlier so we know that the list is correctly stored and we call close Just like dictionaries shelf values have keys and values methods that will return listlike values of the keys and values in the shelf Since these methods return listlike values instead of true lists you should pass them to the list function to get them in list form Enter the following into the interactive shell Plaintext is useful for creating files that youll read in a text editor such as Notepad or TextEdit but if you want to save data from your Python programs use the shelve module Saving Variables with the pprint pformat Function Recall from Pretty Printing that the pprint pprint function will pretty print the contents of a list or dictionary to the screen while the pprint pformat function will return this same text as a string instead of printing it Not only is this string formatted to be easy to read but it is also syntactically correct Python code Say you have a dictionary stored in a variable and you want to save this variable and its contents for future use Using pprint pformat will give you a string that you can write to py file This file will be your very own module that you can import whenever you want to use the variable stored in it For example enter the following into the interactive shell Here we import pprint to let us use pprint pformat We have a list of dictionaries stored in a variable cats To keep the list in cats available even after we close the shell we use pprint pformat to return it as a string Once we have the data in cats as a string its easy to write the string to a file which well call myCats py The modules that an import statement imports are themselves just Python scripts When the string from pprint pformat is saved to a py file the file is a module that can be imported just like any other And since Python scripts are themselves just text files with the py file extension your Python programs can even generate other Python programs You can then import these files into scripts The benefit of creating a py file as opposed to saving variables with the shelve module is that because it is a text file the contents of the file can be read and modified by anyone with a simple text editor For most applications however saving data using the shelve module is the preferred way to save variables to a file Only basic data types such as integers floats strings lists and dictionaries can be written to a file as simple text File objects for example cannot be encoded as text Project Generating Random Quiz Files Say youre a geography teacher with 35 students in your class and you want to give a pop quiz on US state capitals Alas your class has a few bad eggs in it and you cant trust the students not to cheat Youd like to randomize the order of questions so that each quiz is unique making it impossible for anyone to crib answers from anyone else Of course doing this by hand would be a lengthy and boring affair Fortunately you know some Python Here is what the program does Creates 35 different quizzes Creates 50 multiplechoice questions for each quiz in random order Provides the correct answer and three random wrong answers for each question in random order Writes the quizzes to 35 text files Writes the answer keys to 35 text files This means the code will need to do the following Store the states and their capitals in a dictionary Call open write and close for the quiz and answer key text files Use random shuffle to randomize the order of the questions and multiplechoice options Step 1 Store the Quiz Data in a Dictionary The first step is to create a skeleton script and fill it with your quiz data Create a file named randomQuizGenerator py and make it look like the following Since this program will be randomly ordering the questions and answers youll need to import the random module to make use of its functions The capitals variable contains a dictionary with US states as keys and their capitals as values And since you want to create 35 quizzes the code that actually generates the quiz and answer key files marked with TODO comments for now will go inside a for loop that loops 35 times This number can be changed to generate any number of quiz files Step 2 Create the Quiz File and Shuffle the Question Order Now its time to start filling in those TODOs The code in the loop will be repeated 35 timesonce for each quizso you have to worry about only one quiz at a time within the loop First youll create the actual quiz file It needs to have a unique filename and should also have some kind of standard header in it with places for the student to fill in a name date and class period Then youll need to get a list of states in randomized order which can be used later to create the questions and answers for the quiz Add the following lines of code to randomQuizGenerator py The filenames for the quizzes will be capitalsquizltNgt txt where ltNgt is a unique number for the quiz that comes from quizNum the for loops counter The answer key for capitalsquizltNgt txt will be stored in a text file named capitalsquizanswersltNgt txt Each time through the loop the s placeholder in capitalsquizs txt and capitalsquizanswerss txt will be replaced by quizNum 1 so the first quiz and answer key created will be capitalsquiz1 txt and capitalsquizanswers1 txt These files will be created with calls to the open function at and with w as the second argument to open them in write mode The write statements at create a quiz header for the student to fill out Finally a randomized list of US states is created with the help of the random shuffle function which randomly reorders the values in any list that is passed to it Step 3 Create the Answer Options Now you need to generate the answer options for each question which will be multiple choice from A to D Youll need to create another for loopthis one to generate the content for each of the 50 questions on the quiz Then there will be a third for loop nested inside to generate the multiplechoice options for each question Make your code look like the following The correct answer is easy to getits stored as a value in the capitals dictionary This loop will loop through the states in the shuffled states list from states0 to states49 find each state in capitals and store that states corresponding capital in correctAnswer The list of possible wrong answers is trickier You can get it by duplicating all the values in the capitals dictionary deleting the correct answer and selecting three random values from this list The random sample function makes it easy to do this selection Its first argument is the list you want to select from the second argument is the number of values you want to select The full list of answer options is the combination of these three wrong answers with the correct answers Finally the answers need to be randomized so that the correct response isnt always choice D Step 4 Write Content to the Quiz and Answer Key Files All that is left is to write the question to the quiz file and the answer to the answer key file Make your code look like the following A for loop that goes through integers 0 to 3 will write the answer options in the answerOptions list The expression ABCDi at treats the string ABCD as an array and will evaluate to AB C and then D on each respective iteration through the loop In the final line the expression answerOptions index correctAnswer will find the integer index of the correct answer in the randomly ordered answer options and ABCDanswerOptions index correctAnswer will evaluate to the correct answers letter to be written to the answer key file After you run the program this is how your capitalsquiz1 txt file will look though of course your questions and answer options may be different from those shown here depending on the outcome of your random shuffle calls The corresponding capitalsquizanswers1 txt text file will look like this Project Multiclipboard Say you have the boring task of filling out many forms in a web page or software with several text fields The clipboard saves you from typing the same text over and over again But only one thing can be on the clipboard at a time If you have several different pieces of text that you need to copy and paste you have to keep highlighting and copying the same few things over and over again You can write a Python program to keep track of multiple pieces of text This multiclipboard will be named mcb pyw since mcb is shorter to type than multiclipboard The pyw extension means that Python wont show a Terminal window when it runs this program See Appendix B for more details The program will save each piece of clipboard text under a keyword For example when you run py mcb pyw save spam the current contents of the clipboard will be saved with the keyword spam This text can later be loaded to the clipboard again by running py mcb pyw spam And if the user forgets what keywords they have they can run py mcb pyw list to copy a list of all keywords to the clipboard Heres what the program does The command line argument for the keyword is checked If the argument is save then the clipboard contents are saved to the keyword If the argument is list then all the keywords are copied to the clipboard Otherwise the text for the keyword is copied to the clipboard This means the code will need to do the following Read the command line arguments from sys argv Read and write to the clipboard Save and load to a shelf file If you use Windows you can easily run this script from the Run window by creating a batch file named mcb bat with the following content Step 1 Comments and Shelf Setup Lets start by making a skeleton script with some comments and basic setup Make your code look like the following Its common practice to put general usage information in comments at the top of the file If you ever forget how to run your script you can always look at these comments for a reminder Then you import your modules Copying and pasting will require the pyperclip module and reading the command line arguments will require the sys module The shelve module will also come in handy Whenever the user wants to save a new piece of clipboard text youll save it to a shelf file Then when the user wants to paste the text back to their clipboard youll open the shelf file and load it back into your program The shelf file will be named with the prefix mcb Step 2 Save Clipboard Content with a Keyword The program does different things depending on whether the user wants to save text to a keyword load text into the clipboard or list all the existing keywords Lets deal with that first case Make your code look like the following If the first command line argument which will always be at index 1 of the sys argv list is save the second command line argument is the keyword for the current content of the clipboard The keyword will be used as the key for mcbShelf and the value will be the text currently on the clipboard If there is only one command line argument you will assume it is either list or a keyword to load content onto the clipboard You will implement that code later For now just put a TODO comment there Step 3 List Keywords and Load a Keywords Content Finally lets implement the two remaining cases The user wants to load clipboard text in from a keyword or they want a list of all available keywords Make your code look like the following If there is only one command line argument first lets check whether its list If so a string representation of the list of shelf keys will be copied to the clipboard The user can paste this list into an open text editor to read it Otherwise you can assume the command line argument is a keyword If this keyword exists in the mcbShelf shelf as a key you can load the value onto the clipboard And thats it Launching this program has different steps depending on what operating system your computer uses See Appendix B for details for your operating system Recall the password locker program you created in Chapter6 that stored the passwords in a dictionary Updating the passwords required changing the source code of the program This isnt ideal because average users dont feel comfortable changing source code to update their software Also every time you modify the source code to a program you run the risk of accidentally introducing new bugs By storing the data for a program in a different place than the code you can make your programs easier for others to use and more resistant to bugs Summary Files are organized into folders also called directories and a path describes the location of a file Every program running on your computer has a current working directory which allows you to specify file paths relative to the current location instead of always typing the full or absolute path The os path module has many functions for manipulating file paths Your programs can also directly interact with the contents of text files The open function can open these files to read in their contents as one large string with the read method or as a list of strings with the readlines method The open function can open files in write or append mode to create new text files or add to existing text files respectively In previous chapters you used the clipboard as a way of getting large amounts of text into a program rather than typing it all in Now you can have your programs read files directly from the hard drive which is a big improvement since files are much less volatile than the clipboard In the next chapter you will learn how to handle the files themselves by copying them deleting them renaming them moving them and more Practice Questions Q Q Q Q Q Q Q Q Q Practice Projects For practice design and write the following programs Extending the Multiclipboard Extend the multiclipboard program in this chapter so that it has a delete ltkeywordgt command line argument that will delete a keyword from the shelf Then add a delete command line argument that will delete all keywords Mad Libs Create a Mad Libs program that reads in text files and lets the user add their own text anywhere the word ADJECTIVE NOUN ADVERB or VERB appears in the text file For example a text file may look like this The program would find these occurrences and prompt the user to replace them The following text file would then be created The results should be printed to the screen and saved to a new text file Regex Search Write a program that opens all txt files in a folder and searches for any line that matches a usersupplied regular expression The results should be printed to the screen ",
    #                                          "sourceCode": [
    #                                              ">>> import os\n>>> os.path.join('usr', 'bin', 'spam')\n'usr\\\\bin\\\\spam'",
    #                                              ">>> myFiles = ['accounts.txt', 'details.csv', 'invite.docx']\n>>> for filename in myFiles:\n        print(os.path.join('C:\\\\Users\\\\asweigart', filename))\nC:\\Users\\asweigart\\accounts.txt\nC:\\Users\\asweigart\\details.csv\nC:\\Users\\asweigart\\invite.docx",
    #                                              ">>> import os\n>>> os.getcwd()\n'C:\\\\Python34'\n>>> os.chdir('C:\\\\Windows\\\\System32')\n>>> os.getcwd()\n'C:\\\\Windows\\\\System32'",
    #                                              ">>> os.chdir('C:\\\\ThisFolderDoesNotExist')\nTraceback (most recent call last):\n  File \"\", line 1, in \n    os.chdir('C:\\\\ThisFolderDoesNotExist')\nFileNotFoundError: [WinError 2] The system cannot find the file specified:\n'C:\\\\ThisFolderDoesNotExist'",
    #                                              ">>> import os\n>>> os.makedirs('C:\\\\delicious\\\\walnut\\\\waffles')",
    #                                              ">>> os.path.abspath('.')\n'C:\\\\Python34'\n>>> os.path.abspath('.\\\\Scripts')\n'C:\\\\Python34\\\\Scripts'\n>>> os.path.isabs('.')\nFalse\n>>> os.path.isabs(os.path.abspath('.'))\nTrue",
    #                                              ">>> os.path.relpath('C:\\\\Windows', 'C:\\\\')\n'Windows'\n>>> os.path.relpath('C:\\\\Windows', 'C:\\\\spam\\\\eggs')\n'..\\\\..\\\\Windows'\n>>> os.getcwd() 'C:\\\\Python34'",
    #                                              ">>> path = 'C:\\\\Windows\\\\System32\\\\calc.exe'\n>>> os.path.basename(path)\n'calc.exe'\n>>> os.path.dirname(path)\n'C:\\\\Windows\\\\System32'",
    #                                              ">>> calcFilePath = 'C:\\\\Windows\\\\System32\\\\calc.exe'\n>>> os.path.split(calcFilePath)\n('C:\\\\Windows\\\\System32', 'calc.exe')",
    #                                              ">>> (os.path.dirname(calcFilePath), os.path.basename(calcFilePath))\n('C:\\\\Windows\\\\System32', 'calc.exe')",
    #                                              ">>> calcFilePath.split(os.path.sep)\n['C:', 'Windows', 'System32', 'calc.exe']",
    #                                              ">>> '/usr/bin'.split(os.path.sep)\n['', 'usr', 'bin']",
    #                                              ">>> os.path.getsize('C:\\\\Windows\\\\System32\\\\calc.exe')\n776192\n>>> os.listdir('C:\\\\Windows\\\\System32')\n['0409', '12520437.cpx', '12520850.cpx', '5U877.ax', 'aaclient.dll',\n--snip--\n'xwtpdui.dll', 'xwtpw32.dll', 'zh-CN', 'zh-HK', 'zh-TW', 'zipfldr.dll']",
    #                                              ">>> totalSize = 0\n>>> for filename in os.listdir('C:\\\\Windows\\\\System32'):\n      totalSize = totalSize + os.path.getsize(os.path.join('C:\\\\Windows\\\\System32', filename))\n>>> print(totalSize)\n1117846456",
    #                                              ">>> os.path.exists('C:\\\\Windows')\nTrue\n>>> os.path.exists('C:\\\\some_made_up_folder')\nFalse\n>>> os.path.isdir('C:\\\\Windows\\\\System32')\nTrue\n>>> os.path.isfile('C:\\\\Windows\\\\System32')\nFalse\n>>> os.path.isdir('C:\\\\Windows\\\\System32\\\\calc.exe')\nFalse\n>>> os.path.isfile('C:\\\\Windows\\\\System32\\\\calc.exe')\nTrue",
    #                                              ">>> os.path.exists('D:\\\\')\nFalse",
    #                                              ">>> helloFile = open('C:\\\\Users\\\\your_home_folder\\\\hello.txt')",
    #                                              ">>> helloFile = open('/Users/your_home_folder/hello.txt')",
    #                                              ">>> helloContent = helloFile.read()\n>>> helloContent\n'Hello world!'",
    #                                              "When, in disgrace with fortune and men's eyes,\nI all alone beweep my outcast state,\nAnd trouble deaf heaven with my bootless cries,\nAnd look upon myself and curse my fate,",
    #                                              ">>> sonnetFile = open('sonnet29.txt')\n>>> sonnetFile.readlines()\n[When, in disgrace with fortune and men's eyes,\\n', ' I all alone beweep my\noutcast state,\\n', And trouble deaf heaven with my bootless cries,\\n', And\nlook upon myself and curse my fate,']",
    #                                              ">>> baconFile = open('bacon.txt', 'w')\n>>> baconFile.write('Hello world!\\n')\n13\n>>> baconFile.close()\n>>> baconFile = open('bacon.txt', 'a')\n>>> baconFile.write('Bacon is not a vegetable.')\n25\n>>> baconFile.close()\n>>> baconFile = open('bacon.txt')\n>>> content = baconFile.read()\n>>> baconFile.close()\n>>> print(content)\nHello world!\nBacon is not a vegetable.",
    #                                              ">>> import shelve\n>>> shelfFile = shelve.open('mydata')\n>>> cats = ['Zophie', 'Pooka', 'Simon']\n>>> shelfFile['cats'] = cats\n>>> shelfFile.close()",
    #                                              ">>> shelfFile = shelve.open('mydata')\n>>> type(shelfFile)\n>>> shelfFile['cats']\n['Zophie', 'Pooka', 'Simon']\n>>> shelfFile.close()",
    #                                              ">>> shelfFile = shelve.open('mydata')\n>>> list(shelfFile.keys())\n['cats']\n>>> list(shelfFile.values())\n[['Zophie', 'Pooka', 'Simon']]\n>>> shelfFile.close()",
    #                                              ">>> import pprint\n>>> cats = [{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]\n>>> pprint.pformat(cats)\n\"[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]\"\n>>> fileObj = open('myCats.py', 'w')\n>>> fileObj.write('cats = ' + pprint.pformat(cats) + '\\n')\n83\n>>> fileObj.close()",
    #                                              ">>> import myCats\n>>> myCats.cats\n[{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]\n>>> myCats.cats[0]\n{'name': 'Zophie', 'desc': 'chubby'}\n>>> myCats.cats[0]['name']\n'Zophie'",
    #                                              "   #! python3\n   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n   # random order, along with the answer key.\n import random\n   # The quiz data. Keys are states and values are their capitals.\n capitals = {'Alabama': 'Montgomery', 'Alaska': 'Juneau', 'Arizona': 'Phoenix',\n   'Arkansas': 'Little Rock', 'California': 'Sacramento', 'Colorado': 'Denver',\n   'Connecticut': 'Hartford', 'Delaware': 'Dover', 'Florida': 'Tallahassee',\n   'Georgia': 'Atlanta', 'Hawaii': 'Honolulu', 'Idaho': 'Boise', 'Illinois':\n   'Springfield', 'Indiana': 'Indianapolis', 'Iowa': 'Des Moines', 'Kansas':\n   'Topeka', 'Kentucky': 'Frankfort', 'Louisiana': 'Baton Rouge', 'Maine':\n   'Augusta', 'Maryland': 'Annapolis', 'Massachusetts': 'Boston', 'Michigan':\n   'Lansing', 'Minnesota': 'Saint Paul', 'Mississippi': 'Jackson', 'Missouri':\n   'Jefferson City', 'Montana': 'Helena', 'Nebraska': 'Lincoln', 'Nevada':\n   'Carson City', 'New Hampshire': 'Concord', 'New Jersey': 'Trenton', 'New\n   Mexico': 'Santa Fe', 'New York': 'Albany', 'North Carolina': 'Raleigh',\n   'North Dakota': 'Bismarck', 'Ohio': 'Columbus', 'Oklahoma': 'Oklahoma City',\n   'Oregon': 'Salem', 'Pennsylvania': 'Harrisburg', 'Rhode Island': 'Providence',\n   'South Carolina': 'Columbia', 'South Dakota': 'Pierre', 'Tennessee':\n   'Nashville', 'Texas': 'Austin', 'Utah': 'Salt Lake City', 'Vermont':\n   'Montpelier', 'Virginia': 'Richmond', 'Washington': 'Olympia', 'West\n   Virginia': 'Charleston', 'Wisconsin': 'Madison', 'Wyoming': 'Cheyenne'}\n   # Generate 35 quiz files.\n for quizNum in range(35):\n       # TODO: Create the quiz and answer key files.\n       # TODO: Write out the header for the quiz.\n       # TODO: Shuffle the order of the states.\n       # TODO: Loop through all 50 states, making a question for each.",
    #                                              "   #! python3\n   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n   # random order, along with the answer key.\n   --snip--\n   # Generate 35 quiz files.\n   for quizNum in range(35):\n       # Create the quiz and answer key files.\n     quizFile = open('capitalsquiz%s.txt' % (quizNum + 1), 'w')\n     answerKeyFile = open('capitalsquiz_answers%s.txt' % (quizNum + 1), 'w')\n       # Write out the header for the quiz.\n     quizFile.write('Name:\\n\\nDate:\\n\\nPeriod:\\n\\n')\n       quizFile.write((' ' * 20) + 'State Capitals Quiz (Form %s)' % (quizNum + 1))\n       quizFile.write('\\n\\n')\n       # Shuffle the order of the states.\n       states = list(capitals.keys())\n     random.shuffle(states)\n       # TODO: Loop through all 50 states, making a question for each.",
    #                                              "   #! python3\n   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n   # random order, along with the answer key.\n   --snip--\n       # Loop through all 50 states, making a question for each.\n       for questionNum in range(50):\n           # Get right and wrong answers.\n         correctAnswer = capitals[states[questionNum]]\n         wrongAnswers = list(capitals.values())\n         del wrongAnswers[wrongAnswers.index(correctAnswer)]\n         wrongAnswers = random.sample(wrongAnswers, 3)\n         answerOptions = wrongAnswers + [correctAnswer]\n         random.shuffle(answerOptions)\n           # TODO: Write the question and answer options to the quiz file.\n           # TODO: Write the answer key to a file.",
    #                                              "   #! python3\n   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n   # random order, along with the answer key.\n   --snip--\n       # Loop through all 50 states, making a question for each.\n       for questionNum in range(50):\n           --snip--\n           # Write the question and the answer options to the quiz file.\n           quizFile.write('%s. What is the capital of %s?\\n' % (questionNum + 1,\n               states[questionNum]))\n         for i in range(4):\n             quizFile.write(' %s. %s\\n' % ('ABCD'[i], answerOptions[i]))\n           quizFile.write('\\n')\n           # Write the answer key to a file.\n         answerKeyFile.write('%s. %s\\n' % (questionNum + 1, 'ABCD'[\n              answerOptions.index(correctAnswer)]))\n       quizFile.close()\n       answerKeyFile.close()",
    #                                              "Name:\nDate:\nPeriod:\n                    State Capitals Quiz (Form 1)\n1. What is the capital of West Virginia?\n    A. Hartford\n    B. Santa Fe\n    C. Harrisburg\n    D. Charleston\n2. What is the capital of Colorado?\n    A. Raleigh\n    B. Harrisburg\n    C. Denver\n    D. Lincoln\n--snip--",
    #                                              "1. D\n2. C\n3. A\n4. C\n--snip--",
    #                                              "@pyw.exe C:\\Python34\\mcb.pyw %*",
    #                                              "   #! python3\n   # mcb.pyw - Saves and loads pieces of text to the clipboard.\n # Usage: py.exe mcb.pyw save  - Saves clipboard to keyword.\n   #        py.exe mcb.pyw  - Loads keyword to clipboard.\n   #        py.exe mcb.pyw list - Loads all keywords to clipboard.\n import shelve, pyperclip, sys\n mcbShelf = shelve.open('mcb')\n   # TODO: Save clipboard content.\n   # TODO: List keywords and load content.\n   mcbShelf.close()",
    #                                              "   #! python3\n   # mcb.pyw - Saves and loads pieces of text to the clipboard.\n   --snip--\n   # Save clipboard content.\n if len(sys.argv) == 3 and sys.argv[1].lower() == 'save':\n         mcbShelf[sys.argv[2]] = pyperclip.paste()\n   elif len(sys.argv) == 2:\n    # TODO: List keywords and load content.\n   mcbShelf.close()",
    #                                              "   #! python3\n   # mcb.pyw - Saves and loads pieces of text to the clipboard.\n   --snip--\n   # Save clipboard content.\n   if len(sys.argv) == 3 and sys.argv[1].lower() == 'save':\n           mcbShelf[sys.argv[2]] = pyperclip.paste()\n   elif len(sys.argv) == 2:\n       # List keywords and load content.\n     if sys.argv[1].lower() == 'list':\n         pyperclip.copy(str(list(mcbShelf.keys())))\n       elif sys.argv[1] in mcbShelf:\n         pyperclip.copy(mcbShelf[sys.argv[1]])\n   mcbShelf.close()",
    #                                              "The ADJECTIVE panda walked to the NOUN and then VERB. A nearby NOUN was\nunaffected by these events.",
    #                                              "Enter an adjective:\nsilly\nEnter a noun:\nchandelier\nEnter a verb:\nscreamed\nEnter a noun:\npickup truck",
    #                                              "The silly panda walked to the chandelier and then screamed. A nearby pickup\ntruck was unaffected by these events."]},
    #     {"url": "https://pythonspot.com/en/read-file/",
    #      "documentation": " Read file Read file Leave a Reply Cancel reply You must be logged in to post a comment ",
    #      "sourceCode": [
    #          "#!/usr/bin/env python\n\n# Define a filename.\nfilename = \"bestand.py\"\n\n# Open the file as f.\n# The function readlines() reads the file.             \nwith open(filename) as f:\n    content = f.readlines()\n\n# Show the file contents line by line.\n# We added the comma to print single newlines and not double newlines.\n# This is because the lines contain the newline character '\\n'. \nfor line in content:\n    print(line),",
    #          "content = f.read().splitlines()",
    #          "#!/usr/bin/env python\n\n# Define a filename.\nfilename = \"bestand.py\"\n\n# Open the file as f.\n# The function readlines() reads the file.\nwith open(filename) as f:\n    content = f.read().splitlines()\n\n# Show the file contents line by line.\n# We added the comma to print single newlines and not double newlines.\n# This is because the lines contain the newline character '\\n'. \nfor line in content:\n    print(line)",
    #          "#!/usr/bin/env python\nimport os.path\n\n# Define a filename.\nfilename = \"bestand.py\"\n\nif not os.path.isfile(filename):\n    print 'File does not exist.'\nelse:\n    # Open the file as f. \n    # The function readlines() reads the file.\n    with open(filename) as f:\n        content = f.read().splitlines()\n\n    # Show the file contents line by line.\n    # We added the comma to print single newlines and not double newlines.\n    # This is because the lines contain the newline character '\\n'. \n    for line in content:\n        print(line)"]},
    #     {"url": "https://www.guru99.com/reading-and-writing-files-in-python.html",
    #      "documentation": " Python FILE Tutorial Create Append Read Write How to create a Text File How to Append Data to a File How to Read a File Python Python Functions Tutorial Define Call Indentation amp Arguments Course Execute PYTHON Online Python How to Download amp Install Python with Aptana Studio IDE Python Creating Your First Python Program Python Learn Python For amp While Loop with Examples Python Python XML Parser Tutorial Create amp Read XML with Examples Python Tutorials Contact US About US Advertise with Us Write For Us Top Tutorials Career Suggestion Selenium Testing Hacking Interesting Excel Java Python Execute online Jmeter Mobile Testing JIRA",
    #      "sourceCode": ["\r\n\tf= open(\"guru99.txt\",\"w+\")",
    #                     "\r\nfor i in range(10):\r\n     f.write(\"This is line %d\\r\\n\" % (i+1))",
    #                     "\r\n\tf.close() ", "f=open(\"guru99.txt\", \"a+\")",
    #                     "\r\nfor i in range(2):\r\n     f.write(\"Appended line %d\\r\\n\" % (i+1))",
    #                     "\r\n\tf=open(\"guru99.txt\", \"r\")", "\r\n\tif f.mode == 'r':", "\r\n\tcontents =f.read()",
    #                     "\r\ndef main():\r\n    f= open(\"guru99.txt\",\"w+\")\r\n     #f=open(\"guru99.txt\",\"a+\")\r\n       for i in range(10):\r\n         f.write(\"This is line %d\\r\\n\" % (i+1))\r\n       f.close()   \r\n   #Open the file back and read the contents\r\n   #f=open(\"guru99.txt\", \"r\")\r\n   #   if f.mode == 'r': \r\n   #     contents =f.read()\r\n   #     print contents\r\n   #or, readlines reads the individual line into a list\r\n   #fl =f.readlines()\r\n   #for x in fl:\r\n   #print x\r\nif __name__== \"__main__\":\r\n  main()"]},
    #     {"url": "https://www.digitalocean.com/community/tutorials/how-to-handle-plain-text-files-in-python-3",
    #      "documentation": " Contents Share Share Sign up for our newsletter Get the latest tutorials on SysAdmin and open source topics How To Handle Plain Text Files in Python 3 Introduction Prerequisites Background Step 1 acirc128148 Creating a Text File Step 2 acirc128148 Opening a File Step 3 acirc128148 Reading a File Step 4 acirc128148 Writing a File Step 5 acirc128148 Closing a File Step 6 acirc128148 Checking our Code Conclusion Spin up an SSD cloud server in under a minute Related Tutorials Almost there Report a Bug",
    #      "sourceCode": ["Monday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\n",
    #                     "path = '/users/sammy/days.txt'\n", "days_file = open(path,'r')\n", "days_file.read()\n",
    #                     "Output'Monday\\nTuesday\\nWednesday\\nThursday\\nFriday\\nSaturday\\nSunday\\n'\n",
    #                     "days_file.readline()\n", "Output'Monday\\n'\n", "days_file.readline()\n",
    #                     "Output'Tuesday\\n'\n", "days_file.readlines()\n",
    #                     "Output['Monday\\n', 'Tuesday\\n', 'Wednesday\\n', 'Thursday\\n', 'Friday\\n', 'Saturday\\n', 'Sunday\\n']\n",
    #                     "title = 'Days of the Week\\n'\n",
    #                     "path = '/users/sammy/days.txt'\ndays_file = open(path,'r')\ndays = days_file.read()\n",
    #                     "new_path = '/users/sammy/new_days.txt'\nnew_days = open(new_path,'w')\n",
    #                     "new_days.write(title)\nprint(title)\nnew_days.write(days)\nprint(days)\n",
    #                     "days_file.close()\nnew_days.close()\n",
    #                     "path = '/users/sammy/days.txt'\ndays_file = open(path,'r')\ndays = days_file.read()\nnew_path = '/users/sammy/new_days.txt'\nnew_days = open(new_path,'w')\ntitle = 'Days of the Week\\n'\nnew_days.write(title)\nprint(title)\nnew_days.write(days)\nprint(days)\ndays_file.close()\nnew_days.close()\n",
    #                     "python files.py\n",
    #                     "OutputDays of the Week\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\n",
    #                     "Days of the Week\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\n"]}]}
    headers = {'Content-Type': 'application/json'}

    print("POST")
    requests.post(url=url, data=json.dumps(data), headers=headers)
    print("POST")
    return json.dumps({'success': True})


@app.route('/run_get')
def run_get():
    url = 'http://0.0.0.0:10443/code-recommendations'
    data = {
        'query': 'read file',
        'libs': ['flask', 'request', 'json'],
        'comments': ['122', 'todo: test'],
        'language': 'Python',
        'sites': ['stackoverflow'],
    }

    requests.request(url=url, method='GET', data=data)

    return 'get'


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=1111)
