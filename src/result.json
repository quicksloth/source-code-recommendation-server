{"clientID":"AHMAD123","searchResult":[{"documentation":"\ncurrent community\r\n            \n\r\nyour communities            \nmore stack exchange communities\r\n            \nHow do I read every line of a file in Python and store each line as an element in a list? \nI want to read the file line by line and append each line to the end of the list.\nHere's a real-world example that shows how to read/write a file: dreamsyssoft.com/python-scripting-tutorial/classes-tutorial.&zwnj;&#8203;php\nI agree with @J.F.Sebastian. Using for line in f: is memory efficient, fast, and leads to simple code.\nThe OP has gone underground at Jul 18 '10 at 23:21, one hour after asking the question and apparently hasn't been seen since.\nJulie is a real winner!  one question, no answers, silent for 7 years - but top 3% of SO with almost 6000 reputation and 15 badges.  she's probably gone on to become an overnight millionaire.\n@EmettSpeer Probably because the user was looking for an answer :P\n\r\n                                29 Answers\r\n                                29\r\n                        \nI'm guessing that you meant list and not array.\nContent is the list that contains the read lines.\nHow can we strip() the lines using this method? Because the elements have \"\\n\" at the end.\ncontent = [x.strip('\\n') for x in content]\nOr, if you're a fan of doing things in one swell foop: content = [x.strip('\\n') for x in f.readlines()]\n@fbicknel: please, read my comment above. Don't use file.readlines() in a for-loop, a file object itself is enough: lines = [line.rstrip('\\n') for line in file]\nSee Input and Ouput:\nor with stripping the newline character:\nEditor's note: This answer's original whitespace-stripping command, line.strip(), as implied by Janus Troelsen's comment, would remove all leading and trailing whitespace, not just the trailing \\n.\nif you only want to discard the newline: lines = (line.rstrip('\\n') for line in open(filename))\nFor a list it should be lines = [line.rstrip('\\n') for line in open(filename)]\nWon't the 2nd option leave the file open (since it's not guarded by a context on its own)?\n@yo' It does, but most people do not care about that in small programs. There is no harm in small programs since the leaked file object are garbage collected, but it is not a good habit to do this.\nSafer: with open('filename') as f: lines = [line.rstrip('\\n') for line in f]\nThis is more explicit than necessary, but does what you want.\n@aaronasterling what happens when you don't call ins.close()?\n@wrongusername the file stays open and consumes resources. It won't be automatically garbage collected until ins goes out of scope.\nI did a test with 5 files total 1.22 GB with and without close() without 4.43s user 4.87s system 58% cpu 15.982 total with 4.39s user 4.14s system 67% cpu 12.594 total\n@GianPaJ The problem with not closing the file when you are done with it doesn't have anything to do with CPU time. It is a matter of memory used for io buffers, file handles used (there may be an OS limitation on the number of files open at once), and issues with other programs wanting to use the file at the same time.\nThe file in the example above actually gets closed - the with open(....) as ins: is a context processor - this means that Python takes care of freeing the resources, according to the \"context manager\" protocol, which file object adheres to. See  preshing.com/20110920/the-python-with-statement-by-example    and  python.org/dev/peps/pep-0343\nThis will yield an \"array\" of lines from the file.\nwow, how this works internally? any explanations?\nopen returns a file which can be iterated over. When you iterate over a file, you get the lines from that file. tuple can take an iterator and instantiate a tuple instance for you from the iterator that you give it. lines is a tuple created from the lines of the file.\n@MarshallFarrier Try lines = open(filename).read().split('\\n') instead.\ndoes it close the file?\n@NoctisSkytower I find lines = open(filename).read().splitlines() a little cleaner, and I believe it also handles DOS line endings better.\nIf you want the \\n included:\nIf you do not want \\n included:\nBest, most concise, answer: f.read.splitlines()... no strips and complicated for loops.  :)\ngreat ans! better than using lines = open(filename).read().split('\\n') as suggested elsewhere. +1\nYou could simply do the following, as has been suggested:\nNote that this approach has 2 downsides:\nA better approach for the general case would be the following:\nWhere you define your process function any way you want. For example:\n(The implementation of the Superman class is left as an exercise for you).\nThis will work nicely for any file size and you go through your file in just 1 pass. This is typically how generic parsers will work.\nThis was exactly what I needed - and thanks for explaining the downsides. As a beginner in Python, it's awesome to understand why a solution is the solution. Cheers!\nI'm glad it's helpful :)\nthe question doesn't state the need to process every line, so this answer gives irrelevant information\nThink a bit more Corey. Do you really ever want your computer to read each line, without ever doing anything with these lines? Surely you can realize you always need to process them one way or another.\nYou always need to do something with the lines. It can be as simple as printing the lines, or counting them. There is no value in having your process read the lines in memory, but not doing anything with it.\nif you don't care about closing the file, this one-liner works:\nThe traditional way:\nUsing with (recommended):\nIt might be fine in some cases, but this doesn't close the file, even after the loop has completed - stackoverflow.com/a/1832589/232593\n@MerlynMorgan-Graham I've updated the answer, it now includes close(), tks for pointing that.\nThe with block closes the file automatically. No need for the final fp.close() line in that last example. See: repl.it/IMeA/0\n@MerlynMorgan-Graham Tks for pointing that!\nThis should encapsulate the open command. \nf.readlines() does the same.  no need to append to an empty list.\nYou are right. This provides insight into a solution if you want to do something while you are reading in the lines. Like some strip/regex transformation.\nClean and Pythonic Way of Reading the Lines of a File Into a List\nFirst and foremost, you should focus on opening your file and reading its contents in an efficient and pythonic way. Here is an example of the way I personally DO NOT prefer:\nInstead, I prefer the below method of opening files for both reading and writing as it\nis very clean, and does not require an extra step of closing the file\nonce you are done using it. In the statement below, we're opening the file\nfor reading, and assigning it to the variable 'infile.'  Once the code within\nthis statement has finished running, the file will be automatically closed.\nNow we need to focus on bringing this data into a Python List because they are iterable, efficient, and flexible.  In your case, the desired goal is to bring each line of the text file into a separate element. To accomplish this, we will use the splitlines() method as follows:\nThe Final Product:\nTesting Our Code:\nthis entire answer could be replaced by 2 lines of self-explanatory code.  the explanations here are very verbose and convey very little.\nI'd do it like this.\nthis answer was given ~7 years too late\nJust in time for me!\nSorry, I misread the date stamp. Hope some one finds it helpful.\nUpvoted because this algorithm allows you to decide whether you're paying the memory bill by the line or the whole file :-)\nHere's one more option by using list comprehensions on files;\nThis should be more efficient way as the most of the work is done inside the Python interpreter.\nrstrip() potentially strips all trailing whitespace, not just the \\n; use .rstrip('\\n').\nmore efficient compared to what?\nwhere else would the work be done?\nAnother option is numpy.genfromtxt, for example:\nThis will make data a NumPy array with as many rows as are in your file.\nNice one! Thanks!\nThis is the only one that makes an actual array :P\nIf you'd like to read a file from the command line or from stdin, you can also use the fileinput module:\nPass files to it like so:\nRead more here: http://docs.python.org/2/library/fileinput.html\nThe simplest way to do it\nA simple way is to:\nIn one line, that would give:\nShortest and sweetest solution of them all on here\nNow variable out is a list (array) of what you want. You could either do:\nor\nyou'll get the same results.\nJust use the splitlines() functions. Here is an example.\nIn the output you will have the list of lines.\na few things wrong here:  you need to quote 'file.txt', and you never closed the file handle.\nA real easy way:\nIf you want to make it a fully-fledged program, type this in:\nFor some reason, it doesn't read .py files properly.\nwhy do you mport time and then never use it?\nData into list\nLet's read data from a text file  \nSave a file named \"myfile.txt\" whith the following content:\nline number one of the txt file\nline number two of the txt file\nline number three of the txt file\nOpen the cmd in the same dir, run python and write:\nhere I store the lines in a list (my_list)\nNow I get rid of the \\n characters at the end of each line with the strip() method of the class String\nLet's print the list's items\nTo my knowledge Python doesn't have a native array data structure. But it does support the list data structure which is much simpler to use than an array.\npython does have an array (see the standard library's array module), but the question asked for a list.\nIf you want to are faced with a very large / huge file and want to read faster (imagine you are in a Topcoder/Hackerrank coding competition), you might read a considerably bigger chunk of lines into a memory buffer at one time, rather than just iterate line by line at file level.\nwhat does process(line) do? I get an error that there is not such variable defined. I guess something needs importing and I tried to import multiprocessing.Process, but that's not it I guess. Could you please elaborate? Thanks\nprocess(line) is a function that you need to implement to process the data. for example, instead of that line, if you use print(line), it will print each line from the lines_buffer.\nUse this:\ndata is a dataframe type, and uses values to get ndarray. You can also get a list by using array.tolist().\nYou can just open your file for reading using\nThe list lines will contain all your lines as individual elements and you can call a specific element using lines[\"linenumber-1\"] as python starts its counting from 0.\nCould also use the loadtxt command in numpy. This checks for fewer conditions than genfromtxt so it may be faster. \nYou can easily do it by the following piece of code:\nPlease explain your code, please.\nPlease do not add unnecessary responses to such an old post. Ok, your lines = list(open(\"dict.lst\", \"r\")) is not really bad but the , r\" is implied and could be ommitted, a list comprehension is more pythonic than a map(lambda...) and worse than all, you do not explain your code !\n@SergeBallesta dont be so impolite.\nThe list() command is handy (by itself, if you do want to keep the trailing \\n), but @SergeBallesta - leaving tone aside - has a point re use of a lambda; linesSanitized = [line.rstrip('\\n') for line in lines] is both more Pythonic and more readable.\nThis should answer your question. The replace function will act as delimiter to strip the file.\nYour code doesn't read the lines into a list (\"array\"). Instead, it folds all lines into a single line using a space as the separator, and additionally replaces each comma with a space.\n\"textFileLines\" is the array you wanted\nHow about:\nSeveral problems: You don't close the file and you store all lines in memory, twice.\nDeclare a Unix-like method:\nAnd just invoke it to get the file content.\nthe question was about reading into a list.  this answer just displays the entire contents (like cat would)\n                    protected by Antti Haapala May 2 '16 at 6:52\r\n\r\nThank you for your interest in this question. \nBecause it has attracted low-quality or spam answers that had to be removed, posting an answer now requires 10 reputation on this site (the association bonus does not count).\nWould you like to answer one of these unanswered questions instead?\n\r\n        \r\n            Hot Network Questions\r\n        \r\n    \n\r\n                                site design / logo &copy; 2017 Stack Exchange Inc; user contributions licensed under cc by-sa 3.0\r\n                                with attribution required.\r\n                                rev 2017.8.20.26818\r\n                            \n","sourceCode":["with open(fname) as f:\n    content = f.readlines()\n# you may also want to remove whitespace characters like `\\n` at the end of each line\ncontent = [x.strip() for x in content] \n","with open('filename') as f:\n    lines = f.readlines()\n","lines = [line.rstrip('\\n') for line in open('filename')]\n","with open(\"file.txt\", \"r\") as ins:\n    array = []\n    for line in ins:\n        array.append(line)\n","lines = tuple(open(filename, 'r'))\n","with open(fname) as f:\n    content = f.readlines()\n","with open(fname) as f:\n    content = f.read().splitlines()\n","with open('/your/path/file') as f:\n    my_lines = f.readlines()\n","with open('/your/path/file') as f:\n    for line in f:\n        process(line)\n","def process(line):\n    if 'save the world' in line.lower():\n         superman.save_the_world()\n","lines = open('file.txt').read().split(\"\\n\")\n","fp = open('file.txt') # open file on read mode\nlines = fp.read().split(\"\\n\") # create a list containing all lines\nfp.close() # close file\n","with open('file.txt') as fp:\n    lines = fp.read().split(\"\\n\")\n","array = []\nwith open(\"file.txt\", \"r\") as f:\n  for line in f:\n    array.append(line)\n","infile = open('my_file.txt', 'r')  # Open the file for reading.\n\ndata = infile.read()  # Read the contents of the file.\n\ninfile.close()  # Close the file since we're done using it.\n","# Open the file for reading.\nwith open('my_file.txt', 'r') as infile:\n\n    data = infile.read()  # Read the contents of the file into memory.\n","# Return a list of the lines, breaking at line boundaries.\nmy_list = data.splitlines()\n","# Open the file for reading.\nwith open('my_file.txt', 'r') as infile:\n\n    data = infile.read()  # Read the contents of the file into memory.\n\n# Return a list of the lines, breaking at line boundaries.\nmy_list = data.splitlines()\n","     A fost odat&Atilde;&pound; ca-n povesti,\n     A fost ca niciodat&Atilde;&pound;,\n     Din rude m&Atilde;&pound;ri &Atilde;&reg;mp&Atilde;&pound;r&Atilde;&pound;testi,\n     O prea frumoas&Atilde;&pound; fat&Atilde;&pound;.\n","    print my_list  # Print the list.\n\n    # Print each line in the list.\n    for line in my_list:\n        print line\n\n    # Print the fourth element in this list.\n    print my_list[3]\n","     ['A fost odat\\xc3\\xa3 ca-n povesti,', 'A fost ca niciodat\\xc3\\xa3,',\n     'Din rude m\\xc3\\xa3ri \\xc3\\xaemp\\xc3\\xa3r\\xc3\\xa3testi,', 'O prea\n     frumoas\\xc3\\xa3 fat\\xc3\\xa3.']\n\n     A fost odat&Atilde;&pound; ca-n povesti, A fost ca niciodat&Atilde;&pound;, Din rude m&Atilde;&pound;ri\n     &Atilde;&reg;mp&Atilde;&pound;r&Atilde;&pound;testi, O prea frumoas&Atilde;&pound; fat&Atilde;&pound;.\n\n     O prea frumoas&Atilde;&pound; fat&Atilde;&pound;.\n","lines = []\nwith open(\"myfile.txt\") as f:\n    for line in f:\n        lines.append(line)\n","lines = [line.rstrip() for line in open('file.txt')]\n","import numpy as np\ndata = np.genfromtxt(\"yourfile.dat\",delimiter=\"\\n\")\n","# reader.py\nimport fileinput\n\ncontent = []\nfor line in fileinput.input():\n    content.append(line.strip())\n\nfileinput.close()\n","$ python reader.py textfile.txt \n","lines = open('C:/path/file.txt').read().splitlines()\n","f = open(\"your_file.txt\",'r')\nout = f.readlines() # will append in the list out\n","for line in out:\n    print line\n","for line in f:\n    print line\n","inp = file.txt\ndata = open(inp)\ndat = data.read()\nlst = dat.splitlines()\nprint lst\n","with open(file) as g:\n    stuff = g.readlines()\n","import time\nfile = raw_input (\"Enter EXACT file name: \")\nwith open(file) as g:\n    stuff = g.readlines()\nprint (stuff)\nexit = raw_input(\"Press enter when you are done.\")\n","with open(\"myfile.txt\", encoding=\"utf-8\") as file:\n     my_list = file.readlines()\n","my_list = [x.strip() for x in my_list]\n","for rows in my_list:\n    print(rows)\n...\nline number one of the txt file\nline number two of the txt file\nline number three of the txt file\n","array = [] #declaring a list with name '**array**'\nwith open(PATH,'r') as reader :\n    for line in reader :\n        array.append(line)\n","buffersize = 2**16\nwith open(path) as f: \n    while True:\n        lines_buffer = f.readlines(buffersize)\n        if not lines_buffer:\n            break\n        for line in lines_buffer:\n            process(line)\n","import pandas as pd\ndata = pd.read_csv(filename) # You can also add parameters such as header, sep, etc.\narray = data.values\n","file1=open(\"filename\",\"r\")\nand for reading use\nlines=file1.readlines()\n","import numpy \ndata = numpy.loadtxt(filename,delimiter=\"\\n\")\n","lines = open(filePath).readlines()\n","lines = list(open(\"dict.lst\", \"r\"))\nlinesSanitized = map(lambda each:each.strip(\"\\n\"), lines)\nprint linesSanitized\n","with open(fname) as fo:\n        data=fo.read().replace('\\n', ' ').replace (',', ' ')\n","textFile = open(\"E:\\Values.txt\",\"r\")\ntextFileLines = textFile.readlines()\n","fp = open(\"filename\")\ncontent = fp.read();\nlines = content.split(\"\\n\")\n","def cat(filename):\n    with open(filename) as f:\n        return f.read().decode('utf-8')\n","content = cat(filename)\n"],"url":"https://stackoverflow.com/questions/3277503/how-do-i-read-a-file-line-by-line-into-a-list"},{"documentation":"\nOpenTechSchool\nIntroduction to Data Processing with Python\nWhat's a text file?\nA text file is any file containing only readable characters.\nA character can be a number like 3 or 6, or a letter of the alphabet like M or p. Taken together, programmers call numbers and letters the set of alphanumeric characters.\nCharacters also include non-alphanumeric symbols like # or $, or even more exotic symbols like 汉 or Й. Each of these is a single character\n(The last characters in the paragraph above will only appear correctly if your browser is using a font that supports Simplified Chinese and Cyrillic characters, respectively.)\nSymbols in text files can have special meanings, for example Python source code files are a type of plain text file.\nHTML files are another kind of plain text file. Even though HTML tags like &lt;i&gt; or &lt;div&gt; mean special things to a web browser they are still stored in a plain text format that can be viewed in any text editor.\nWhat isn't a text file?\nThe opposite of text files, \"binary\" files are any files where the format isn't made up of readable characters. Binary files can range from image files like JPEGs or GIFs, audio files like MP3s or binary document formats like Word or PDF.\nThis section has been a bit dry, so here's a link to a binary GIF file of a kitten.\nThe main difference between a text file and a binary file is that binary files need special programs (or knowledge of the special format) to make sense. Text files can be edited by any program that edits plain text, and are easy to process in programming languages like Python.\nReading files into Python\nDownload this text file, months.txt containing names of months of the year\n... etc\nWhat do you think the following code does, if you run it in the same directory as months.txt?\nTry it out in an IPython Notebook cell.\nSolution:\nIt prints out the contents of the text file.\nWhat's really happening here?\nThe open function creates a file object (a way of getting at the contents of the file), which is then stored in the variable f.\nf.read() tells the file object to read the full contents of the file, and return it as a string.\nReading by smaller pieces\nread() can also take an argument, which is the maximum number of characters to read from a file.\nOnce read() has reached the end of the file, it returns an empty string (zero characters, the string \"\")\nCan you work out what this code would do?\nSolution:\nIt prints the contents of the file, one character at a time, until the end of the file is reached:\n... and so on\nBonus Question #1\nWhat is the while statement in the above code doing? When does the program exit the while loop?\nThink about the value that the variable next has each time the while loop is evaluated. What happens when the end of the file is reached?\nBonus Question #2\nWhat would happen if you replaced the read(1)s in the code above with read(2)s? Think about it first, then try it and see what happens!\nReading files line by line\nSo far we can read a whole file, or we can read a certain number of characters from a file. How about if you just want to read a single line from a file?\nHow lines are represented\nIn text files, lines are broken up by special invisible characters that mark end of line. Invisible characters like these are sometimes called control characters.\nIn Python, the control character for the end of a line is always represented as \\n. You can use \\n in a string anywhere that you want to break a line:\nProduces:\nControl characters like \\n date from the days when computers had typewriter style interfaces (see \"Teletype machines\".) Characters had literal meanings like Press the Carriage Return Lever or Press the Line Feed button.\nEnough about typewriters!\nYes, back to Python files! To read a file line by line you could just keep reading one character at a time with .read(1), until you run into a newline character \\n.\nThere's an easier way though, which is to use the .readline() method in place of .read().\nHave another look at the one-character-per-line code example from earlier in this chapter. Can you modify it to read from the file line by line instead of character by character?\nHint: In IPython Notebook, you can copy a whole cell by choosing Edit -&gt; Copy Cell. That way you can keep the character-per-line example unmodified and create a new cell for the line by line code.\nSolution:\nHow's that look? Something's not quite right, is it?\n... readline() also returns the newline \\n at the end of the line, and print() automatically appends a newline as well - having two newlines in a row means there is a the blank line between each line with content.\nYou can strip newlines (and other \"whitespace\" characters) from each end of a string by using the .strip() method. We used this briefly in the Introduction to Python course.\nCan you remember how to use it? (take a look at the documentation link above to refresh your memory.)\nSee if you can modify your program to strip off the extra newlines.\nSolution:\nYou can either replace\nWith\nOr you can make it into two lines, like this:\nIn the two line alternative you update the next variable to hold the \"stripped\" version. This might be useful if you intend to use the value of next again, later on.\nStrip by default removes whitespace characters from the ends of strings (including \\n but also spaces or tabs.) Another way you can use it is to tell it specifically to only remove \\n, nothing else:\nReading Every Line\nreadline() will let you read through a file line by line. However, there are two even easier ways to read an entire file this way:\nThe readlines() method reads all the lines in a file and returns them as a Python list.\nYou can then iterate over the list of lines like this:\nIn fact, you don't even have to call readlines() - Python assumes that if you try to iterate through a text file with a for loop, you probably want to iterate through it line by line:\nWriting to files\nWhen you open() a file, you can optionally specify a file mode, which tells Python what you want to do with the file. The default mode is r for read, but another mode is w to write to a file.\nTip: the write (w) mode will write completely new contents to a file, wiping out what it had previously!\nThere are actually a whole lot of file modes, r and w are just the most common. There is a full list in the Python documentation for the open function or you can type open? in IPython Notebook and run it to see the help displayed there.\nCan you guess how to write a string to a file in Python?\nHint\nFile objects have a method for writing. You can find out about it by viewing the built-in help for the file object. In IPython Notebook you can type:\nOr just type f. into IPython Notebook and then press \"Tab\" to view an automatic list of possible completions (NB: this only works if you've already run the cell once before to assign a value to \"f\".)\nSolution\nWhy do you use 'print' to write things on the console, but 'write' for files?\nI don't know. I think it's just been that way for as long as Python has been around.\nThere is one important difference between print and write, print() automatically ends the line. write() doesn't, if you want to end the line you'll need to add the newline character \\n yourself.\nCan you write a program which creates a two line text file?\nClosing Files\nThe last part of the solution is to close() the file when you're done. This is good practice to \"clean up\" after yourself. Changes may not show up in the file until you've closed it.\nYou can close() files that you've opened for reading as well.\nHint\nTo look at the contents of a text file, you can open it in your text editor.\nAlternatively, if you're using OS X or Linux you can type cat &lt;filename&gt; in a terminal (not a Python interpreter, the plain terminal shell you run Python from), to print the contents out. In the Windows terminal, you can use type &lt;filename&gt; to do the same thing.\nSolution:\nExercise!\nIf you want to try all this out, here's a quick exercise to make sure you've got everything down pat. First, use a text editor to create a plain text file with a few lines of random text. Then write a Python program that:\nWhen writing to the files, remember that print() adds a newline but with write() you have to add the newline yourself.\nIf you're not sure where to start, one approach is to modify one of the solutions to the previous exercises. If you get stuck, remember you can always call over a coach for some advice.\nNext Chapter\nNow we're ready to process some of the text data from the files, in Working With Strings.\n      © 2013-2014 - made by OpenTechSchool and its Contributors  ||  Impressum\n    \n","sourceCode":["January\nFebruary\nMarch\n","f = open(\"months.txt\")\nprint(f.read())\n","f = open(\"months.txt\")\nnext = f.read(1)\nwhile next != \"\":\n    print(next)\n    next = f.read(1)\n","J\na\nn\nu\na\nr\ny\n\nF\ne\nb\nr\n","print(\"I want two lines!\\nThe newline character gives me two lines.\")\n","I want two lines!\nThe newline character gives me two lines.\n","f = open(\"months.txt\")\nnext = f.readline()\nwhile next != \"\":\n    print(next)\n    next = f.readline()\n","January\n\nFebruary\n\nMarch\n","print(next)\n","print(next.strip())\n","next = next.strip()\nprint(next)\n","next = next.strip(\"\\n\")\nprint(next)\n","f = open(\"months.txt\")\nprint(f.readlines())\n","f = open(\"months.txt\")\nfor month in f.readlines():\n   print(\"Month \" + month.strip())\n","f = open(\"months.txt\")\nfor month in f:\n   print(\"Month \" + month.strip())\n","f = open(\"awesomenewfile.txt\", \"w\")\n","f = open(\"awesomenewfile.txt\", \"w\")\nf?\n","f = open(\"awesomenewfile.txt\", \"w\")\nf.write(\"Awesome message!\")\nf.close()\n","f = open(\"mylongfile.txt\", \"w\")\nf.write(\"First line\\n\")\nf.write(\"Second line\")\nf.close()\n"],"url":"http://opentechschool.github.io/python-data-intro/core/text-files.html"},{"documentation":"\n","sourceCode":["&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","When, in disgrace with fortune and men's eyes,\nI all alone beweep my outcast state,\nAnd trouble deaf heaven with my bootless cries,\nAnd look upon myself and curse my fate,","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","&gt;&gt;&gt; ","   #! python3\n   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n   # random order, along with the answer key.\n\n❶ import random\n\n   # The quiz data. Keys are states and values are their capitals.\n❷ capitals = {'Alabama': 'Montgomery', 'Alaska': 'Juneau', 'Arizona': 'Phoenix',\n   'Arkansas': 'Little Rock', 'California': 'Sacramento', 'Colorado': 'Denver',\n   'Connecticut': 'Hartford', 'Delaware': 'Dover', 'Florida': 'Tallahassee',\n   'Georgia': 'Atlanta', 'Hawaii': 'Honolulu', 'Idaho': 'Boise', 'Illinois':\n   'Springfield', 'Indiana': 'Indianapolis', 'Iowa': 'Des Moines', 'Kansas':\n   'Topeka', 'Kentucky': 'Frankfort', 'Louisiana': 'Baton Rouge', 'Maine':\n   'Augusta', 'Maryland': 'Annapolis', 'Massachusetts': 'Boston', 'Michigan':\n   'Lansing', 'Minnesota': 'Saint Paul', 'Mississippi': 'Jackson', 'Missouri':\n   'Jefferson City', 'Montana': 'Helena', 'Nebraska': 'Lincoln', 'Nevada':\n   'Carson City', 'New Hampshire': 'Concord', 'New Jersey': 'Trenton', 'New\n   Mexico': 'Santa Fe', 'New York': 'Albany', 'North Carolina': 'Raleigh',\n   'North Dakota': 'Bismarck', 'Ohio': 'Columbus', 'Oklahoma': 'Oklahoma City',\n   'Oregon': 'Salem', 'Pennsylvania': 'Harrisburg', 'Rhode Island': 'Providence',\n   'South Carolina': 'Columbia', 'South Dakota': 'Pierre', 'Tennessee':\n   'Nashville', 'Texas': 'Austin', 'Utah': 'Salt Lake City', 'Vermont':\n   'Montpelier', 'Virginia': 'Richmond', 'Washington': 'Olympia', 'West\n   Virginia': 'Charleston', 'Wisconsin': 'Madison', 'Wyoming': 'Cheyenne'}\n\n   # Generate 35 quiz files.\n❸ for quizNum in range(35):\n       # TODO: Create the quiz and answer key files.\n\n       # TODO: Write out the header for the quiz.\n\n       # TODO: Shuffle the order of the states.\n\n       # TODO: Loop through all 50 states, making a question for each.","   #! python3\n   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n   # random order, along with the answer key.\n\n   --","   #! python3\n   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n   # random order, along with the answer key.\n\n   --","   #! python3\n   # randomQuizGenerator.py - Creates quizzes with questions and answers in\n   # random order, along with the answer key.\n\n   --","Name:\n\nDate:\n\nPeriod:\n\n                    State Capitals Quiz (Form 1)\n\n1. What is the capital of West Virginia?\n    A. Hartford\n    B. Santa Fe\n    C. Harrisburg\n    D. Charleston\n\n2. What is the capital of Colorado?\n    A. Raleigh\n    B. Harrisburg\n    C. Denver\n    D. Lincoln\n\n--","1. D\n2. C\n3. A\n4. C\n--","@pyw.exe C:\\Python34\\mcb.pyw %*","   #! python3\n   # mcb.pyw - Saves and loads pieces of text to the clipboard.\n❶ # Usage: py.exe mcb.pyw save &lt;keyword&gt; - Saves clipboard to keyword.\n   #        py.exe mcb.pyw &lt;keyword&gt; - Loads keyword to clipboard.\n   #        py.exe mcb.pyw list - Loads all keywords to clipboard.\n\n❷ import shelve, pyperclip, sys\n\n❸ mcbShelf = shelve.open('mcb')\n\n   # TODO: Save clipboard content.\n\n   # TODO: List keywords and load content.\n\n   mcbShelf.close()","   #! python3\n   # mcb.pyw - Saves and loads pieces of text to the clipboard.\n   --","   #! python3\n   # mcb.pyw - Saves and loads pieces of text to the clipboard.\n   --","The ADJECTIVE panda walked to the NOUN and then VERB. A nearby NOUN was\nunaffected by these events.","Enter an adjective:\n","The silly panda walked to the chandelier and then screamed. A nearby pickup\ntruck was unaffected by these events."],"url":"https://automatetheboringstuff.com/chapter8/"},{"documentation":"In Python, there is no need for importing external library to read and write files. Python provides an inbuilt function for creating, writing and reading files. \nIn this tutorial, we will learn \nHow to create a Text File\nWith Python you can create a .text files (guru99.txt) by using the code, we have demonstrated here how you can do this \nStep 1)  \nStep 2)  \nStep 3)  \nHere is the result after code execution \nWhen you click on your text file in our case \"guru99.txt\" it will look something like this \nHow to Append Data to a File\nYou can also append a new text to the already existing file or the new file. \nStep 1)  \nOnce again if you could see a plus sign in the code, it indicates that it will create a new file if it does not exist. But in our case we already have the file, so we are not required to create a new file. \nStep 2)  \nThis will write data into the file in append mode. \nYou can see the output in \"guru99.txt\" file. The output of the code is that line number 1 is appended with line number 2. \nHow to Read a File\nNot only you can create .txt file from Python but you can also call .txt file in a \"read mode\"(r). \nStep 1) Open the file in Read mode \nStep 2) We use the mode function in the code to check that the file is in open mode. If yes, we proceed ahead \nStep 3) Use f.read to read file data and store it in variable content\nStep 4) print contents\nHere is the output \nStep 5) You can also read your .txt file line by line if your data is too big to read. This code will segregate your data in easy to ready mode \nWhen you run the code (f1=f.readlines()) for reading the file or document line by line, it will separate each line and present the file in a readable format. In our case the line is short and readable, the output will look similar to the read mode. But if there is a complex data file which is not readable, this piece of code could be useful. \nHere is the complete code \nSummary \nOperators are used to perform operations on values and variables. Operators can manipulate...\nWith Python you can also access and retrieve data from the internet like XML, HTML, JSON, etc. You...\nIn Python, date, time and datetime classes provides a number of function to deal with dates, times...\nWhat is Regular Expression? A regular expression in a programming language is a special text...\nA tuple is just like a list of a sequence of immutable python objects. The difference between list and...\nIn Python everything is object and string are an object too. Python string can be created simply...\n","sourceCode":["\r\n\tf= open(\"guru99.txt\",\"w+\")","\r\nfor i in range(10):\r\n     f.write(\"This is line %d\\r\\n\" % (i+1))","\r\n\tf.close() ","f=open(\"guru99.txt\", \"a+\")","\r\nfor i in range(2):\r\n     f.write(\"Appended line %d\\r\\n\" % (i+1))","\r\n\tf=open(\"guru99.txt\", \"r\")","\r\n\tif f.mode == 'r':","\r\n\tcontents =f.read()","\r\ndef main():\r\n    f= open(\"guru99.txt\",\"w+\")\r\n     #f=open(\"guru99.txt\",\"a+\")\r\n       for i in range(10):\r\n         f.write(\"This is line %d\\r\\n\" % (i+1))\r\n       f.close()   \r\n   #Open the file back and read the contents\r\n   #f=open(\"guru99.txt\", \"r\")\r\n   #   if f.mode == 'r': \r\n   #     contents =f.read()\r\n   #     print contents\r\n   #or, readlines reads the individual line into a list\r\n   #fl =f.readlines()\r\n   #for x in fl:\r\n   #print x\r\nif __name__== \"__main__\":\r\n  main()"],"url":"https://www.guru99.com/reading-and-writing-files-in-python.html"}]}